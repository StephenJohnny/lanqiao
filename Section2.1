# 2.1.1
n = int(input())
a = list(map(int,input.split()))

for i in range(1,n):
  for j in range(n-i):
    if a[j] > a[j+1]:
      a[j],a[j+1] = a[j+1],a[j]
print(' '.join(map(str,a)))

# 2.1.2
n = int(input())
a = list(map(int,input.split()))

for i in range(0,n-1):
  min_value = a[i]
  min_idx = i
  for j in range(1,n):
    if a[j] < min_value:
      min_value = a[j]
      min_idx = j
      a[i],a[min_idx] = a[min_idx],a[i]
print(' '.join(map(str,a)))

# 2.1.3
n = int(input())
a = list(map(int,input.split()))

for i in range(1,n):
  value = a[i]
  insert_idx = 0
  for j in range(i-1,-1,-1):
    if a[j] > value:
      a[j+1] = a[j]
    else:
      insert_idx = j+1
  a[insert_idx] = value
print(' '.join(map(str,a)))

# 2.1.4
n = int(input())
a = list(map(int,input.split()))

def partition(a,left,right):
  idx = left + 1
  for i in range(left+1,right+1):
    if a[i] <= a[left]:
      a[idx],a[i] = a[i],a[idx]
      idx += 1
  a[left],a[idx-1] = a[idx-1],a[left]
  return idx-1

  def quicksort(a,left,right):
    if left < right:
      mid = partition(a,left,right)
      quicksort(a,left,mid-1)
      quicksort(a,mid+1,right)

quicksort(a,0,n-1)
print(' ',join(map(str,a)))

# 2.1.5
n = int(input())
a = list(map(int,input.split()))

def Merge(A,B):
  result = []
  while len(A) !=0 and len(B) !=0:
    if A[0] < B[0]:
      result.append(A.pop(0))
    else:
      result.append(B.pop(0))
  result.expend(A)
  result.expend(B)
  return result

def Mergesort(A):
  if len(A) < 2:
    return a
  mid = len(A) // 2
  left = MergeSort(A[:mid])
  right = MergeSort(A[mid:])
  return Merge(left,right)

print(' '.join(map(str,MergeSort(a))))

# 2.1.6
n = int(input())
a = list(map(int,input.split()))

from itertools import chain
def Bucket_Sort(a,bucketcount):
  minvalue, maxvalue = min(a), max(a)
  bucketsize = (maxvalue - minvalue + 1)//bucketcount
  res = [[]for i in range(bucketcount + 1)]
  for x in a:
    idx = (x - minvalue) // bucketsize
    res[idx].append(x)

  for res_x in res:
    res_x.sort()
  
  return list(chain(*res))

  a = Bucket_Sort(a,min(n,10000))
  print(' '.join(map(str,a)))
